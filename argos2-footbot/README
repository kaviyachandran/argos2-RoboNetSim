*** INTRODUCTION ***

In this package you'll find a controller that implements behaviour of relay, mission agents and base station with collision avoidance and navigation.

**** Map Actuator has the following ***
footbot_beacon => 0x27af278
footbot_leds => 0x27af318
footbot_wheels => 0x27abda8
wifi => 0x27aab78

*** Identifier code ***

Relay:
c - Relay sending hello to mission agents
d - Relay sending acceptance to receive data

Agents:
a - Agent sending profile data to relay
b - Agent sending data to relay after receiving acceptance 

m - data exchange among agents
r - data exchange among relays

*** choosing Mission Agent to collect data ***

Now relay responds to the mision agents based on the order it receives message from mission agents.

Should the relay respond to the agent which is farthest from it or based on the amount of data it has to transmit ? 

How does relay prioritize among agents?

*** When does the relay send message type "c" to agent again.*** 

Say for example Relay meets agent at t=0 so again even if they are in contact relay should try to get the information again only at t=20. Believing that there is a new info after 20 timesteps.

For agent messages in relays:
Relays can have a map <id, struct> ----> id as key and the structure object with all values as value.


*** COMPILATION ***


$ mkdir build
$ cd build

To produce debuggable code (slow), type:

$ cmake -DCMAKE_BUILD_TYPE=Debug ..

To produce fast but not debuggable code, type:

$ cmake -DCMAKE_BUILD_TYPE=Release ..

Finally, launch the compilation with the command:

$ make

If you find no error, you're ready to go to the next phase.



